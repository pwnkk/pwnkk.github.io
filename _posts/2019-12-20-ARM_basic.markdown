---
layout: post
title:  "ARM 汇编基础"
categories: REVERSE
tags: REVERSE
excerpt: ARM
mathjax: true
---

* content
{:toc}

## 0x00 ARM基础介绍
ARM处理器有两种工作状态：ARM 状态和Thumb状态，处理器可以在两种状态之间切换。
ARM状态执行32位的ARM指令，Thumb状态下执行16位指令。

arm 下的函数调用约定
函数的第 1 ～ 4 个参数分别保存在 r0 ～ r3 寄存器中， 剩下的参数从右向左依次入栈， 被调用者实现栈平衡，函数的返回值保存在 r0 中

![](IMG/ARM/arm1.png)

当前程序状态寄存器 CPSR
FP （frame pointer） 栈帧指针寄存器
SP (Stack pointer)  栈指针寄存器
PC (Program couter) 程序计数器

局部变量优先存储在寄存器中：

ARM：依次存储在R4~R11。
Thumb：依次存储在R4~R7。

不能在寄存器中存储的，则在当前栈帧中分配。

##0x01 ARM指令格式

`<opcode> { <cond>}{S} {.W\ .N} <Rd>, <Rn> {, <operand2>}`
opcode 指令助记符 
cond  执行条件
S 指定是否影响CPSR寄存器的值
.W\ .N 为指令宽度说明符 默认情况下是16位代码，如果想要宽度为32位使用 .W 宽度说明符 ，16位是 .N
![](IMG/ARM/arm2.png)

## 0x02 数据处理指令
数据传送指令用于在寄存器和存储器之间进行数据的双向传输。
算术逻辑运算指令完成常用的算术与逻辑的运算，该类指令不但将运算结果保存在目的寄存器中，同时更新CPSR中的相应条件标志位。
比较指令不保存运算结果，只更新CPSR中相应的条件标志位。

CSPR条件码标记：
N.Z.C.V均为条件码标志位。它们的内容可被算术或逻辑运算的结果所改变，并且可以决定某条指令是否被执行。
![](IMG/ARM/arm3.png)

数据处理指令共以下16条。

1. MOV指令

MOV指令的格式为：
MOV{条件}{S} 目的寄存器，源操作数
MOV指令可完成从另一个寄存器.被移位的寄存器或将一个立即数加载到目的寄存器。其中S选项决定指令的操作是否影响CPSR中条件标志位的值，当没有S时指令不更新CPSR中条件标志位的值。
指令示例：

```

MOV R1，R0           ;将寄存器R0的值传送到寄存器R1
MOV PC，R14          ;将寄存器R14的值传送到PC，常用于子程序返回
MOV R1，R0，LSL＃3    ;将寄存器R0的值左移3位后传送到R1
```

2. MVN指令

MVN指令的格式为： MVN{条件}{S} 目的寄存器，源操作数 

MVN指令可完成从另一个寄存器.被移位的寄存器.或将一个立即数加载到目的寄存器。与MOV指令不同之处是在传送之前按位被取反了，即把一个被取反的值传送到目的寄存器中。其中S决定指令的操作是否影响CPSR中条件标志位的值，当没有S时指令不更新CPSR中条件标志位的值。
指令示例：

```

MVN  R0，＃0        ;将立即数0取反传送到寄存器R0中，完成后R0=-1
```

3. CMP指令

CMP指令的格式为：
CMP{条件} 操作数1，操作数2
CMP指令用于把一个寄存器的内容和另一个寄存器的内容或立即数进行比较，同时更新CPSR中条件标志位的值。该指令进行一次减法运算，但不存储结果，只更改条件标志位。标志位表示的是操作数1与操作数2的关系(大.小.相等)，例如，当操作数1大于操作操作数2，则此后的有GT 后缀的指令将可以执行。（类似SUBS 但不保存结果）
指令示例：

```
CMP    R1，R0      ;将寄存器R1的值与寄存器R0的值相减，并根据结果设置CPSR的标志位
CMP   R1，＃100       ;将寄存器R1的值与立即数100相减，并根据结果设置CPSR的标志位
```


4. CMN指令

CMN指令的格式为：
CMN{条件} 操作数1，操作数2
CMN指令用于把一个寄存器的内容和另一个寄存器的内容或立即数取反后进行比较，同时更新CPSR中条件标志位的值。该指令实际完成操作数1和操作数2相加，并根据结果更改条件标志位。（类似ADDS 但不保存结果）
指令示例：

```

CMN    R1，R0      ;将寄存器R1的值与寄存器R0的值相加，并根据结果设置CPSR的标志位
CMN    R1，＃100    ;将寄存器R1的值与立即数100相加，并根据结果设置CPSR的标志位
```


5. TST指令

TST指令的格式为：
TST{条件} 操作数1，操作数2
TST指令用于把一个寄存器的内容和另一个寄存器的内容或立即数进行按位的与运算，并根据运算结果更新CPSR中条件标志位的值。操作数1是要测试的数据，而操作数2是一个位掩码，该指令一般用来检测是否设置了特定的位。
指令示例：

```
TST    R1，＃％1   ;用于测试在寄存器R1中是否设置了最低位（％表示二进制数）
TST    R1，＃0xffe    ;将寄存器R1的值与立即数0xffe按位与，并根据结果设置CPSR的标志位
```
6. TEQ指令

TEQ指令的格式为：
TEQ{条件} 操作数1，操作数2
TEQ指令用于把一个寄存器的内容和另一个寄存器的内容或立即数进行按位的异或运算，并根据运算结果更新CPSR中条件标志位的值。该指令通常用于比较操作数1和操作数2是否相等。
指令示例：

```
TEQ   R1，R2    ;将寄存器R1的值与寄存器R2的值按位异或，并根据结果设置CPSR的标志位
```
7. ADD指令

ADD指令的格式为：
ADD{条件}{S} 目的寄存器，操作数1，操作数2
ADD指令用于把两个操作数相加，并将结果存放到目的寄存器中。操作数1应是一个寄存器，操作数2可以是一个寄存器，被移位的寄存器，或一个立即数。
指令示例：

```
ADD     R0，R1，R2          ; R0 = R1 + R2
ADD     R0，R1，#256        ; R0 = R1 + 256
ADD     R0，R2，R3，LSL#1   ; R0 = R2 + (R3 << 1)
```
8. ADC指令

ADC指令的格式为：
ADC{条件}{S} 目的寄存器，操作数1，操作数2
ADC指令用于把两个操作数相加，再加上CPSR中的C条件标志位的值，并将结果存放到目的寄存器中。它使用一个进位标志位，这样就可以做比32位大的数的加法，注意不要忘记设置S后缀来更改进位标志。操作数1应是一个寄存器，操作数2可以是一个寄存器，被移位的寄存器，或一个立即数。
以下指令序列完成两个128位数的加法，第一个数由高到低存放在寄存器R7～R4，第二个数由高到低存放在寄存器R11～R8，运算结果由高到低存放在寄存器R3～R0：

```
ADDS     R0，R4，R8         ; 加低端的字
ADCS     R1，R5，R9          ; 加第二个字，带进位
ADCS     R2，R6，R10         ; 加第三个字，带进位
ADC      R3，R7，R11        ; 加第四个字，带进位
```
9. SUB指令

SUB指令的格式为：
SUB{条件}{S} 目的寄存器，操作数1，操作数2
SUB指令用于把操作数1减去操作数2，并将结果存放到目的寄存器中。操作数1应是一个寄存器，操作数2可以是一个寄存器，被移位的寄存器，或一个立即数。该指令可用于有符号数或无符号数的减法运算。
指令示例：

```

SUB     R0，R1，R2                ; R0 = R1 - R2
SUB     R0，R1，#256              ; R0 = R1 - 256
SUB     R0，R2，R3，LSL#1         ; R0 = R2 - (R3 << 1)
```

10. C指令

C指令的格式为：
C{条件}{S} 目的寄存器，操作数1，操作数2
C指令用于把操作数1减去操作数2，再减去CPSR中的C条件标志位的反码，并将结果存放到目的寄存器中。操作数1应是一个寄存器，操作数2可以是一个寄存器，被移位的寄存器，或一个立即数。该指令使用进位标志来表示借位，这样就可以做大于32位的减法，注意不要忘记设置S后缀来更改进位标志。该指令可用于有符号数或无符号数的减法运算。
指令示例：

`SUBS    R0，R1，R2       ; R0 = R1 - R2 - ！C`，并根据结果设置CPSR的进位标志位

11. R指令

R指令的格式为：
R{条件}{S} 目的寄存器，操作数1，操作数2
R指令称为逆向减法指令，用于把操作数2减去操作数1，并将结果存放到目的寄存器中。操作数1应是一个寄存器，操作数2可以是一个寄存器，被移位的寄存器，或一个立即数。该指令可用于有符号数或无符号数的减法运算。
指令示例：

```
R0，R1，R2              ; R0 = R2 – R1
R0，R1，#256            ; R0 = 256 – R1
R0，R2，R3，LSL#1       ; R0 = (R3 << 1) - R2
```

12. RSC指令

RSC指令的格式为：
RSC{条件}{S} 目的寄存器，操作数1，操作数2
RSC指令用于把操作数2减去操作数1，再减去CPSR中的C条件标志位的反码，并将结果存放到目的寄存器中。操作数1应是一个寄存器，操作数2可以是一个寄存器，被移位的寄存器，或一个立即数。该指令使用进位标志来表示借位，这样就可以做大于32位的减法，注意不要忘记设置S后缀来更改进位标志。该指令可用于有符号数或无符号数的减法运算。
指令示例：


`RSC     R0，R1，R2          ; R0 = R2 – R1 - ！C`

13. AND指令

AND指令的格式为：
AND{条件}{S} 目的寄存器，操作数1，操作数2
AND指令用于在两个操作数上进行逻辑与运算，并把结果放置到目的寄存器中。操作数1应是一个寄存器，操作数2可以是一个寄存器，被移位的寄存器，或一个立即数。该指令常用于屏蔽操作数1的某些位。
指令示例：

`AND R0，R0，＃3            ; 该指令保持R0的0.1位，其余位清零。`

14. ORR指令

ORR指令的格式为：
ORR{条件}{S} 目的寄存器，操作数1，操作数2
ORR指令用于在两个操作数上进行逻辑或运算，并把结果放置到目的寄存器中。操作数1应是一个寄存器，操作数2可以是一个寄存器，被移位的寄存器，或一个立即数。该指令常用于设置操作数1的某些位。
指令示例：


`ORR R0，R0，＃3         ; 该指令设置R0的0.1位，其余位保持不变。`

15. EOR指令

EOR指令的格式为：
EOR{条件}{S} 目的寄存器，操作数1，操作数2
EOR指令用于在两个操作数上进行逻辑异或运算，并把结果放置到目的寄存器中。操作数1应是一个寄存器，操作数2可以是一个寄存器，被移位的寄存器，或一个立即数。该指令常用于反转操作数1的某些位。
指令示例：

1
EOR R0，R0，＃3        ; 该指令反转R0的0.1位，其余位保持不变。
16.BIC指令

BIC指令的格式为：
BIC{条件}{S} 目的寄存器，操作数1，操作数2
BIC指令用于清除操作数1的某些位，并把结果放置到目的寄存器中。操作数1应是一个寄存器，操作数2可以是一个寄存器，被移位的寄存器，或一个立即数。操作数2为32位的掩码，如果在掩码中设置了某一位，则清除这一位。未设置的掩码位保持不变。
指令示例：

1
BIC R0，R0，＃％1011    ; 该指令清除 R0 中的位 0.1.和 3，其余的位保持不变。

### 0x03 跳转指令
+ B {cond} label   跳转指令
    如果cond满足 立即跳转到label处 ，BNE  label 表示 条件码Z=0 时 (不相等) 跳转到label
+ BL {cond} label  带链接的跳转
    在跳转之前先将下一条指令地址拷贝到R14 寄存器中，再跳转到label 。通常用于调用子函数，子程序最后执行" MOV PC ，LR" 返回主程序。
+ BX {cond} Rm 带状态切换的
如果cond满足 判断Rm的位[0] 是否为1 ，如果为1则跳转，将CPSR寄存器标志T置位，将目标代码解析为thumb代码。
如果Rm 位[0]为0 则将CPSR寄存器标志T复位，将目标代码解析为ARM代码。
+ BLX 结合了BL和BX的功能 

### 0x04 存储器访问指令
+  LDR 从存储器中加载数据到寄存器中
    LDR {type}{cond} Rd，label
    LDRD {cond} Rd，Rd2，label
type： 操作数据的大小 (B,SB,H,SH , 带S为有符号，B字节，H半字)
label ：要读取的内存地址  
+ STR 用于存储数据到指定地址的存储单元中
    STR R0, [R2 , #04]    将R0寄存器的值放到R2+4 指向的单元

### 0x05 批量数据加载
ARM微处理器所支持批量数据加载/存储指令可以一次在一片连续的存储器单元和多个寄存器之间传送数据，批量加载指令用于将一片连续的存储器中的数据传送到多个寄存器，批量数据存储指令则完成相反的操作。

LDM（或STM）指令格式如下

`LDM（或STM）{cond}{type} 基址寄存器{！}，Reglist{∧}`

指令用于从由基址寄存器所指示的一片连续存储器到寄存器列表所指示的多个寄存器之间传送数据，该指令的常见用途是将多个寄存器的内容入栈或出栈。

其中type为以下几种情况
```
IA 每次传送后地址加1;
IB 每次传送前地址加1;
DA 每次传送后地址减1;
DB 每次传送前地址减1;
FD 满递减堆栈;
ED 空递减堆栈;
FA 满递增堆栈;
EA 空递增堆栈;
```
{！}为可选后缀，若选用该后缀，则当数据传送完毕之后，将最后的地址写入基址寄存器，否则基址寄存器的内容不改变。

基址寄存器不允许为R15，寄存器列表可以为R0～R15的任意组合。

{∧}为可选后缀，当指令为LDM且寄存器列表中包含R15，选用该后缀时表示：除了正常的数据传送之外，还将SPSR复制到CPSR。同时，该后缀还表示传入或传出的是用户模式下的寄存器，而不是当前模式下的寄存器。
例如
```
STMFD  R13!，{R0，R4-R12，LR}  ;将寄存器列表中的寄存器（R0，R4到R12，LR）存入堆栈。
LDMFD  R13!，{R0，R4-R12，PC}  ;将堆栈内容恢复到寄存器（R0，R4到R12，LR）。
```

### 0x06 位操作 

1.LSL（或ASL）操作

LSL（或ASL）操作的格式为：
通用寄存器，LSL（或ASL） 操作数 
LSL（或ASL）可完成对通用寄存器中的内容进行逻辑（或算术）的左移操作，按操作数所指定的数量向左移位，低位用零来填充。其中，操作数可以是通用寄存器，也可以是立即数（0～31）。
操作示例

```
MOV   R0, R1, LSL#2      ;将R1中的内容左移两位后传送到R0中。
```
2.LSR操作

LSR操作的格式为：
通用寄存器，LSR 操作数 
LSR可完成对通用寄存器中的内容进行右移的操作，按操作数所指定的数量向右移位，左端用零来填充。其中，操作数可以是通用寄存器，也可以是立即数（0～31）。
操作示例：

```
MOV   R0, R1, LSR#2      ;将R1中的内容右移两位后传送到R0中，左端用零来填充。
```
3.ASR操作

ASR操作的格式为：
通用寄存器，ASR 操作数 
ASR可完成对通用寄存器中的内容进行右移的操作，按操作数所指定的数量向右移位，左端用第31位的值来填充。其中，操作数可以是通用寄存器，也可以是立即数（0～31）。
操作示例：

```
MOV    R0, R1, ASR#2     ;将R1中的内容右移两位后传送到R0中，左端用第31位的值来填充。
```

4.ROR操作

ROR操作的格式为：
通用寄存器，ROR 操作数 
ROR可完成对通用寄存器中的内容进行循环右移的操作，按操作数所指定的数量向右循环移位，左端用右端移出的位来填充。其中，操作数可以是通用寄存器，也可以是立即数（0～31）。显然，当进行32位的循环右移操作时，通用寄存器中的值不改变。
操作示例：

```
MOV    R0, R1, ROR#2      ;将R1中的内容循环右移两位后传送到R0中。
```

5.RRX操作

RRX操作的格式为：
通用寄存器，RRX 操作数 
RRX可完成对通用寄存器中的内容进行带扩展的循环右移的操作，按操作数所指定的数量向右循环移位，左端用进位标志位C来填充。其中，操作数可以是通用寄存器，也可以是立即数（0～31）。
操作示例：

```

MOV   R0, R1, RRX#2       ;将R1中的内容进行带扩展的循环右移两位后传送到R0中。
```

### 参考链接

http://m4x.fun/post/how-2-pwn-an-arm-binary/
http://abcdxyzk.github.io/blog/2015/01/30/assembly-arm-base/
https://www.jianshu.com/p/bd96a8f58cbd
